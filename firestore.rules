rules_version = '2';
service cloud.firestore {
  function isValidTag(tag,id){
    return tag.size() == 3
    && 'id' in tag
    && tag.id is string
    && tag.id == id
    && 'name' in tag
    && tag.name is string
    && tag.name.size() > 0 && tag.name.size() <= 100
    && 'createdAt' in tag
    && tag.createdAt is timestamp
  }

  function isValidCard(card,id){
    return card.size() == 4
    && 'id' in card
    && card.id is string
    && card.id == id
    && 'question' in card
    && card.question is string
    && card.question.size() > 0 && card.question.size() <= 100
    && 'answer' in card
    && card.answer is string
    && card.answer.size() > 0 && card.answer.size() <= 100
    && 'index' in card
    && card.index is int
    && card.index >= 0 && card.index < 100
  }

  function isValidDeck(deck,id){
    return deck.size() == 6
    && 'id' in deck
    && deck.id is string
    && deck.id == id
    && 'name' in deck 
    && deck.name is string
    && deck.name.size() > 0 && deck.name.size() <= 50
    && 'tagIds' in deck
    && deck.tagIds is list
    && deck.tagIds.size() <= 100
    && 'cardLength' in deck
    && deck.cardLength is int
    && deck.cardLength > 0 && deck.cardLength <= 100
    && 'createdAt' in deck
    && deck.createdAt is timestamp
    && 'published' in deck
    && deck.published is bool
  }

  function isAuth(userId){
    return request.auth != null && request.auth.uid == userId
  }

  match /databases/{database}/documents {
    match /users/undefined/{document=**} {
      allow read, write: if false;
    }
    match /users/{userId} {
      match /tags/{tagId} {
        allow create: if isAuth(userId) && isValidTag(request.resource.data, tagId);
        allow update: if isAuth(userId) && isValidTag(request.resource.data, tagId);
        allow delete: if isAuth(userId);

        allow get: if isAuth(userId) && exists(request.path);
        allow list: if isAuth(userId);
      }
      match /decks/{deckId} {
        allow create: if isAuth(userId) && isValidDeck(request.resource.data, deckId);
        allow update: if isAuth(userId) && isValidDeck(request.resource.data, deckId);
        allow delete: if isAuth(userId);

        allow get: if isAuth(userId) && exists(request.path);
        allow list: if isAuth(userId);

        match /cards/{cardId} {
          allow create: if isAuth(userId) && isValidCard(request.resource.data, cardId);
          allow update: if isAuth(userId) && isValidCard(request.resource.data, cardId);
          allow delete: if isAuth(userId);

          allow get: if isAuth(userId) && exists(request.path);
          allow list: if isAuth(userId);
        }
      }
    }
  }
}